# Build Container and Push Metadata to Deployment Server
on:
  push:
    branches:
      - master
name: Deploy to ECR
jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: technologyradar
        IMAGE_TAG: 1.${{ github.run_number }}
      run: |
        # Build a docker container and push it to ECR
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
  push-metadata:
    name: Push Metadata
    needs: deploy
    runs-on: ubuntu-latest
    container: octopusdeploy/octo:6.17.3-alpine
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Push Metadata
      env:
        OCTOPUS_APIKEY: ${{ secrets.OCTOPUS_APIKEY }}
        OCTOPUS_SERVER: ${{ secrets.OCTOPUS_SERVER }}
        PACKAGE_NAME: eMarketerOSS.TechnologyRadar
        IMAGE_TAG: 1.${{ github.run_number }}
      run: |
        octo pack --id $PACKAGE_NAME --version $IMAGE_TAG --basePath=.github/workflows --outFolder ./out --format zip
        octo push --package ./out/$PACKAGE_NAME.$IMAGE_TAG.zip  --server $OCTOPUS_SERVER --apiKey $OCTOPUS_APIKEY
